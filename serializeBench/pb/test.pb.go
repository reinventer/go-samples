// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/test.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestObject struct {
	Query                string                `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	PageNumber           int64                 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	ResultPerPage        int64                 `protobuf:"varint,3,opt,name=result_per_page,json=resultPerPage,proto3" json:"result_per_page,omitempty"`
	Flag                 bool                  `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Score                float32               `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
	List                 []*TestNested         `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`
	Map                  map[int64]*TestNested `protobuf:"bytes,7,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nested               *TestNested           `protobuf:"bytes,8,opt,name=nested,proto3" json:"nested,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TestObject) Reset()         { *m = TestObject{} }
func (m *TestObject) String() string { return proto.CompactTextString(m) }
func (*TestObject) ProtoMessage()    {}
func (*TestObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_04f6d9131236dd9d, []int{0}
}
func (m *TestObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestObject.Unmarshal(m, b)
}
func (m *TestObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestObject.Marshal(b, m, deterministic)
}
func (dst *TestObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestObject.Merge(dst, src)
}
func (m *TestObject) XXX_Size() int {
	return xxx_messageInfo_TestObject.Size(m)
}
func (m *TestObject) XXX_DiscardUnknown() {
	xxx_messageInfo_TestObject.DiscardUnknown(m)
}

var xxx_messageInfo_TestObject proto.InternalMessageInfo

func (m *TestObject) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *TestObject) GetPageNumber() int64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *TestObject) GetResultPerPage() int64 {
	if m != nil {
		return m.ResultPerPage
	}
	return 0
}

func (m *TestObject) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *TestObject) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *TestObject) GetList() []*TestNested {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TestObject) GetMap() map[int64]*TestNested {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *TestObject) GetNested() *TestNested {
	if m != nil {
		return m.Nested
	}
	return nil
}

type TestNested struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestNested) Reset()         { *m = TestNested{} }
func (m *TestNested) String() string { return proto.CompactTextString(m) }
func (*TestNested) ProtoMessage()    {}
func (*TestNested) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_04f6d9131236dd9d, []int{1}
}
func (m *TestNested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestNested.Unmarshal(m, b)
}
func (m *TestNested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestNested.Marshal(b, m, deterministic)
}
func (dst *TestNested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestNested.Merge(dst, src)
}
func (m *TestNested) XXX_Size() int {
	return xxx_messageInfo_TestNested.Size(m)
}
func (m *TestNested) XXX_DiscardUnknown() {
	xxx_messageInfo_TestNested.DiscardUnknown(m)
}

var xxx_messageInfo_TestNested proto.InternalMessageInfo

func (m *TestNested) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func init() {
	proto.RegisterType((*TestObject)(nil), "pb.TestObject")
	proto.RegisterMapType((map[int64]*TestNested)(nil), "pb.TestObject.MapEntry")
	proto.RegisterType((*TestNested)(nil), "pb.TestNested")
}

func init() { proto.RegisterFile("pb/test.proto", fileDescriptor_test_04f6d9131236dd9d) }

var fileDescriptor_test_04f6d9131236dd9d = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0x27, 0xcd, 0x36, 0xeb, 0x1b, 0x53, 0x09, 0x82, 0xc1, 0x8b, 0xa1, 0xc8, 0xa8, 0x97, 0x0a,
	0x7a, 0x11, 0xef, 0x7a, 0x73, 0x8e, 0xe0, 0xbd, 0x24, 0xf3, 0x59, 0xa6, 0x5d, 0x1b, 0x93, 0x54,
	0xd8, 0xf7, 0xf4, 0x03, 0x49, 0x12, 0x7b, 0xd2, 0xdb, 0xfb, 0xfd, 0x79, 0x2f, 0x79, 0xbf, 0x07,
	0x0b, 0xa3, 0xaf, 0x3d, 0x3a, 0x5f, 0x19, 0xdb, 0xfb, 0x9e, 0x65, 0x46, 0x17, 0xdf, 0x19, 0xc0,
	0x0b, 0x3a, 0xff, 0xac, 0xdf, 0x71, 0xe3, 0xd9, 0x29, 0x4c, 0x3f, 0x07, 0xb4, 0x7b, 0x4e, 0x04,
	0x29, 0x0f, 0x65, 0x02, 0xec, 0x02, 0xe6, 0x46, 0x35, 0x58, 0x77, 0xc3, 0x4e, 0xa3, 0xe5, 0x99,
	0x20, 0x25, 0x95, 0x10, 0xa8, 0x55, 0x64, 0xd8, 0x12, 0x8e, 0x2d, 0xba, 0xa1, 0xf5, 0xb5, 0x41,
	0x5b, 0x07, 0x81, 0xd3, 0x68, 0x5a, 0x24, 0x7a, 0x8d, 0x76, 0xad, 0x1a, 0x64, 0x0c, 0x26, 0x6f,
	0xad, 0x6a, 0xf8, 0x44, 0x90, 0x32, 0x97, 0xb1, 0x0e, 0x4f, 0xba, 0x4d, 0x6f, 0x91, 0x4f, 0x05,
	0x29, 0x33, 0x99, 0x00, 0x2b, 0x60, 0xd2, 0x6e, 0x9d, 0xe7, 0x33, 0x41, 0xcb, 0xf9, 0xcd, 0x51,
	0x65, 0x74, 0x15, 0xbe, 0xb9, 0x42, 0xe7, 0xf1, 0x55, 0x46, 0x8d, 0x5d, 0x01, 0xdd, 0x29, 0xc3,
	0x0f, 0xa2, 0xe5, 0x6c, 0xb4, 0xa4, 0x4d, 0xaa, 0x27, 0x65, 0x1e, 0x3a, 0x6f, 0xf7, 0x32, 0x78,
	0xd8, 0x12, 0x66, 0x5d, 0x6c, 0xe5, 0xb9, 0x20, 0xff, 0x0c, 0xfc, 0x55, 0xcf, 0x1f, 0x21, 0x1f,
	0x1b, 0xd9, 0x09, 0xd0, 0x0f, 0x4c, 0x49, 0x50, 0x19, 0x4a, 0x76, 0x09, 0xd3, 0x2f, 0xd5, 0x0e,
	0x18, 0x13, 0xf8, 0x3b, 0x24, 0x89, 0xf7, 0xd9, 0x1d, 0x29, 0x8a, 0x94, 0x6a, 0x12, 0xc2, 0x8a,
	0x7e, 0xeb, 0x5b, 0x1c, 0x53, 0x8d, 0x40, 0xcf, 0xe2, 0x15, 0x6e, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x86, 0xde, 0xef, 0x20, 0x96, 0x01, 0x00, 0x00,
}
